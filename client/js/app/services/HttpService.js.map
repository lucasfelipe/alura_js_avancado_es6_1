{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","data","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAK;AACf,4BAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAK;AAAA;;AACL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;AAGH;;;yCAIIJ,G,EAAKK,I,EAAM;AAAA;;AACZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAE,gBAAgB,kBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAIJH,IAJI,CAIC;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBAJD,CAAP;AAKH","file":"HttpService.js","sourcesContent":["export class HttpService {\n\n    _handleErrors(res) {\n        if (!res.ok) throw new Error(res.statusText);\n        return res;\n    }\n\n    get(url) {\n        return fetch(url)\n            .then(res => this._handleErrors(res))\n            .then(res => res.json());\n    }\n\n\n\n    post(url, data) {\n        return fetch(url, {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'post',\n            body: JSON.stringify(data)\n        }).then(res => this._handleErrors(res))\n    }\n\n    // post(url, data) {\n    //     return new Promise((resolve, reject) => {\n    //         let xhr = new XMLHttpRequest();\n    //         xhr.open('POST', url);\n    //         xhr.setRequestHeader('Content-type', 'application/json');\n    //         xhr.onreadystatechange = () => {\n    //             if (xhr.readyState == 4) {\n    //                 if (xhr.status == 200) {\n    //                     resolve(xhr.responseText);\n    //                 } else {\n    //                     reject(xhr.responseText);\n    //                 }\n    //             }\n    //         };\n    //         xhr.send(JSON.stringify(data));\n    //     });\n    // }\n\n    /* \n          0: requisição ainda não iniciada\n  \n          1: conexão com o servidor estabelecida\n  \n          2: requisição recebida\n  \n          4: requisição concluída e a resposta esta pronta\n      */\n\n    // get(url) {\n    //     return new Promise((resolve, reject) => {\n    //         let xhr = new XMLHttpRequest();\n    //         xhr.open('GET', url);\n    //         xhr.onreadystatechange = () => {\n    //             if (xhr.readyState == 4) {\n    //                 if (xhr.status == 200) {\n    //                     resolve(JSON.parse(xhr.responseText));\n    //                 } else {\n    //                     reject(xhr.responseText);\n    //                 }\n    //             }\n    //         };\n    //         xhr.send();\n    //     });\n    // }\n}"]}